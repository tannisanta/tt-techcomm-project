{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>A sentence should contain no unnecessary words, a paragraph no unnecessary sentences, for the same reason that a drawing should have no unnecessary lines and a machine no unnecessary parts.</p> <p>William Strunk, Jr.</p>"},{"location":"Books%20and%20blogs/Books/","title":"Books","text":"<p>On this page you can find a handpicked collection of essential TechComm books. If you're passionate about the art and science of technical communication, these books are a treasure trove of valuable insights, practical tips, and expert guidance.</p> <ol> <li>Technical Communication, by Mike Markel</li> <li>The Insider's Guide to Technical Writing, by Krista Van Laan</li> <li>Managing Your Documentation Projects, by JoAnn T. Hackos</li> <li>Technical Writing for Dummies, by Sheryl Lindsell-Roberts</li> <li>The Elements of Technical Writing, by Gary Blake</li> <li>The Product Is Docs: Writing Technical Documentation in a Product Development Group, by Christopher Gales</li> <li>The Essentials of Technical Communication, by Sam Dragga</li> <li>Developing Quality Technical Information: A Handbook for Writers and Editors, by Gretchen Hargis</li> <li>Docs for Developers: An Engineer\u2019s Field Guide to Technical Writing, by Jen Lambourne</li> <li>The Global English Style Guide, by J.R. Kohl</li> <li>Developing Quality Technical Information, by G. Hargis, M. Carey</li> <li>Every Page Is Page One: Topic-Based Writing for Technical Communication and the Web, by M. Baker, S. Abel</li> <li>Style: The Basics of Clarity and Grace, by Joseph Williams, Joseph Bizup</li> <li>Technical Editing, by C.D. Rude, A. Eaton</li> <li>Technical Writing Process: The simple, five-step guide that anyone can use to create technical documents such as user guides, manuals, and procedures, by Kieran Morgan</li> <li>Knowledge Management, by E. Hajric</li> <li>Microcopy. The complete Guide, by Kinneret Yifrah</li> </ol>"},{"location":"Books%20and%20blogs/Techcomm_blogs/","title":"Techcomm blogs","text":"<p>On this page you can find a curated list of top-notch TechComm blogs. Whether you're an aspiring technical communicator, a seasoned professional, or simply intrigued by the world of technical communication, these blogs are your gateway to a wealth of knowledge, insights, and trends in the field.</p> <ol> <li>I'd Rather Be Writing by Tom Johnson.</li> <li>Blog by Chris Chinchilla.</li> <li>Documentation Portal by Ivan Cheban.</li> <li>Technical Writing Blog by ClickHelp.</li> </ol>"},{"location":"Static%20websites/MkDocs_website/","title":"MkDocs website","text":"<p>MkDocs is a popular static site generator specifically designed for creating documentation websites. It allows you to write your documentation content in Markdown format and automatically generates a static HTML website.</p> <p>Here are a few reasons why MkDocs is a good choice for technical documentation:</p> <ul> <li> <p>Simplicity  It has a minimalistic approach, focusing on the essentials of documentation without unnecessary complexity.</p> </li> <li> <p>Markdown support  With MkDocs, you can write your documentation content in Markdown, making it accessible to both technical and non-technical contributors.</p> </li> <li> <p>Navigation and search  MkDocs automatically generates a navigation menu based on the directory structure of your documentation. Additionally, it provides a built-in search functionality that allows users to quickly find the information they need within your documentation.</p> </li> <li> <p>Customizability  MkDocs offers a range of customizable themes and templates, allowing you to tailor the appearance of your documentation to match your brand or project.</p> </li> <li> <p>Versioning and deployment  MkDocs supports versioning, making it convenient to manage and publish multiple versions of your documentation.</p> </li> <li> <p>Integration with version control systems (VCS)  MkDocs works well with VCS like Git. You can store your documentation files in a Git repository, making it easy to collaborate with team members, track changes, and manage contributions.</p> </li> </ul> <p>In this document, I share the process of building an MkDoc static website and hosting in on GitHub pages.</p> <p></p>"},{"location":"Static%20websites/MkDocs_website/#prerequisites","title":"Prerequisites","text":"<ul> <li>VS Code (or other source code editor)</li> <li>Python extension installed</li> <li>GitHub account</li> <li>GitHub desktop</li> </ul>"},{"location":"Static%20websites/MkDocs_website/#step-by-step_guide","title":"Step-by-step guide","text":"<p>The instructions below help create a GitHub repository, clone the repository to the local machine, launch the MkDocs website with Python, and publish it to GitHub pages.</p>"},{"location":"Static%20websites/MkDocs_website/#create_github_repository","title":"Create GitHub repository","text":"<p>To create new repository in your GitHub account</p> <ol> <li>Log in to your GitHub account.</li> <li>At the top left corner, select + &gt; New repository.</li> <li>Give a name to your repository.</li> <li>Select Public.</li> <li>Select Add a README file.</li> <li>For .gitignore select Python.</li> <li>(Optional) For the Choose a license step, select the GNU General public license from the dropdown list.</li> <li>Select Create repository. Your repository has been created.</li> <li>Open your GitHub desktop account and clone the repository.</li> </ol> <p>Now you can make changes locally and then commit and push them to GitHub account in the web.</p>"},{"location":"Static%20websites/MkDocs_website/#build_website","title":"Build website","text":"<p>To build a website</p> <ol> <li>Open your cloned project in VS Code and open its terminal.</li> <li> <p>Assuming you have Python already, create virtual Python environment by using the following command:</p> <p><code>bash    python -m venv venv</code></p> </li> <li> <p>Activate it using the following command:</p> <p><code>bash    source venv/bin/activate</code></p> </li> <li> <p>Install MkDocs with the following command:</p> <p><code>bash    pip install mkdocs-material</code></p> <p>All the dependencies are downloaded for the website.</p> </li> <li> <p>Created a new website by using the command:</p> <pre><code>mkdocs new .\n</code></pre> <p>You  now have two files created for the website:</p> <pre><code>INFO     -  Writing config file: ./mkdocs.yml\nINFO     -  Writing initial docs: ./docs/index.md\n</code></pre> </li> <li> <p>Run the website locally by using the command:</p> <p><code>bash    mkdocs serve</code></p> <p>The website runs locally at <code>http://127.0.0.1:8000/</code></p> </li> <li> <p>Open the website by copying and pasting the local host address into the browser address bar. The website is served and can be accesses locally. </p> </li> </ol> <p>If you need to make a pause and activate the env some time later, use the following commands in the VS Code terminal of the project:</p> <pre><code>source venv/bin/activate\n\nmkdocs serve\n</code></pre>"},{"location":"Static%20websites/MkDocs_website/#configure_website","title":"Configure website","text":"<p>The website has the initial configuration. You can add configuration using the Material for MkDocs documentation. Let us proceed with the basic setup.</p> <p>To configure MkDocs website</p> <ol> <li>Open your mkdocs.yml in VS Code.</li> <li> <p>Edit the content to change theme, define language, add a search box, and set colours:</p> <p><code>yml    site_name: Your website name    theme:    name: material   features:      - navigation.tabs      - navigation.sections      - toc.integrate      - navigation.top      - search.suggest      - search.highlight      - content.tabs.link      - content.code.annotation      - content.code.copy      - toc.follow      - navigation.path   language: en   palette:      - scheme: default         toggle:            icon: material/toggle-switch-off-outline             name: Switch to dark mode         primary: indigo         accent: purple       - scheme: slate          toggle:            icon: material/toggle-switch            name: Switch to light mode             primary: indigo         accent: lime</code></p> </li> <li> <p>Save to apply the changes.</p> </li> <li> <p>Use the following command to rerun the website configuration:</p> <pre><code>mkdocs serve\n</code></pre> <p>When you refresh the website in your browser by visiting the same local host, you can see the changes. If you need to add more settings to your website configuration and add extensions, use the Material for MkDocs documentation.</p> </li> </ol>"},{"location":"Static%20websites/MkDocs_website/#add_pages","title":"Add pages","text":"<p>To add pages</p> <ol> <li>Go to the project folder in VS Code.</li> <li>Select the docs folder.</li> <li>Select New file.</li> <li>Enter the file name and define the .md format. For example, anotherpage.md.</li> <li>Save your file and open it.</li> <li>Add the text to be displayed on the newly added page.</li> <li>Save the changes. When you refresh the page, you can see the changes. </li> </ol>"},{"location":"Static%20websites/MkDocs_website/#publish_website_on_github","title":"Publish website on GitHub","text":"<p>To prepare files for publishing</p> <ol> <li>Open your website project in VS code.</li> <li>Create the .github folder.</li> <li>In the .github folder, create the workflows folder.</li> <li>In the the workflows folder, create ci.yml file.</li> <li> <p>Paste the following code to the file:</p> <pre><code>name: ci \non:\n  push:\n     branches:\n        - master \n        - main\npermissions:\n  contents: write\njobs:\n  deploy:\n     runs-on: ubuntu-latest\n     steps:\n        - uses: actions/checkout@v3\n        - uses: actions/setup-python@v4\n        with:\n           python-version: 3.x\n        - uses: actions/cache@v4\n        with:\n           key: ${{ github.ref }}\n           path: .cache\n        - run: pip install mkdocs-material\n        - run: pip install pillow cairosvg\n        - run: mkdocs gh-deploy --force\n</code></pre> </li> <li> <p>Save changes.</p> </li> <li>Open you GitHub Desktop, add comment and commit changes to GitHub.</li> <li>Select Push origin to push changes to the origin remote repository. The website project files are now stored on GitHub.</li> </ol> <p>To publish website using GitHub pages</p> <ol> <li>On GitHub, open the project repository.</li> <li>Go to Settings &gt; Pages.</li> <li>For Source, leave Deploy from a branch.</li> <li>For Branch, select gh-pages and save. </li> <li>Go to the Actions tab. You can see that the website is being deployed to GitHub pages.</li> <li>Open the pages build and deployment and follow the link in deploy box. The website is published.</li> <li>Add a direct link to the repository About section by opening settings, selecting the Use your GitHub Pages website checkbox, and saving the changes. </li> </ol> <p>You can know access your website and share it with others, make changes locally and push them to GitHub. The website is automatically deployed after you push your changes.</p> <p>References</p> <ul> <li>MkDocs documentation</li> <li>GitHub pages</li> <li>Code blocks in MkDocs</li> </ul>"}]}